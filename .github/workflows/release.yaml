name: Release
on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: The version you intend to release (eg x.y.z)
        required: true
  pull_request:
    types: [ closed ]
  push:
    branches:
      - 'release/**'
    tags:
      - v*

env:
  VERSION: ${{ github.event.inputs.version }}
  APP_ID: 257262

jobs:
  prepare:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version != '' }}
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@0914d50df753bbc42180d982a6550f195390069f
        with:
          app_id: ${{env.APP_ID}}
          private_key: ${{ secrets.TOKEN_EXCHANGE_GH_APP_PRIVATE_KEY }}
          permissions: >-
            {"contents": "write", "pull_requests": "write"}
      - name: Checkout repository code
        uses: actions/checkout@v3
        with:
          token: ${{ steps.generate_token.outputs.token }}
      - uses: actions/setup-go@v3
        with:
          go-version: '^1.19.x'
      - name: Update docs Version
        run: make updateversion VERSION=${{env.VERSION}}
      - name: Create PR
        id: cpr
        uses: peter-evans/create-pull-request@331d02c7e2104af23ad5974d4d5cbc58a3e6dc77
        with:
          add-paths: .
          commit-message: "Update version to v${{env.VERSION}}"
          branch: release/v${{env.VERSION}}
          delete-branch: true
          title: "Release v${{env.VERSION}}"
          body: |
            Release prepared for ${{env.VERSION}}
          token: ${{ steps.generate_token.outputs.token }}
  tag:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' && github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release') }}
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92
        with:
          app_id: ${{env.APP_ID}}
          private_key: ${{ secrets.TOKEN_EXCHANGE_GH_APP_PRIVATE_KEY }}
          repository: ${{ github.repository }}
          permissions: >-
            {"contents": "write"}
      - name: Set VERSION variable from tag
        run: |
          VERSION=${{github.head_ref}}
          echo "VERSION=${VERSION##*/}" >> $GITHUB_ENV
      - name: Checkout repository code
        uses: actions/checkout@v3
        with:
          token: ${{ steps.generate_token.outputs.token }}
          fetch-depth: 0
      - name: Tag
        run: |
          git config --global user.password ${{ steps.generate_token.outputs.token }}
          git tag -d ${{env.VERSION}} 2> /dev/null || echo 'local ref does not exist'
          git push origin :${{env.VERSION}} 2> /dev/null || echo 'remote ref does not exist'
          git tag ${{env.VERSION}}
          git push origin ${{env.VERSION}}
  release:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92
        with:
          app_id: ${{env.APP_ID}}
          private_key: ${{ secrets.TOKEN_EXCHANGE_GH_APP_PRIVATE_KEY }}
          repository: ${{ github.repository }}
          permissions: >-
            {"contents": "write"}
      - name: Checkout repository code
        uses: actions/checkout@v3
        with:
          token: ${{ steps.generate_token.outputs.token }}
          fetch-depth: 0
      - name: Sync v1 branch
        run: |
          git fetch origin
          git switch v1
          git merge origin/main
          git push origin v1
      - name: Release
        id: ghr
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ steps.generate_token.outputs.token }}
